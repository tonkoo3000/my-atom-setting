(function() {
  var SassAutocompileOptions;

  module.exports = SassAutocompileOptions = (function() {
    SassAutocompileOptions.OPTIONS_PREFIX = 'sass-autocompile.';

    SassAutocompileOptions.get = function(name) {
      return atom.config.get(SassAutocompileOptions.OPTIONS_PREFIX + name);
    };

    SassAutocompileOptions.set = function(name, value) {
      return atom.config.set(SassAutocompileOptions.OPTIONS_PREFIX + name, value);
    };

    SassAutocompileOptions.unset = function(name) {
      return atom.config.unset(SassAutocompileOptions.OPTIONS_PREFIX + name);
    };

    function SassAutocompileOptions() {
      this.initialize();
    }

    SassAutocompileOptions.prototype.initialize = function() {
      var ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9;
      this.compileOnSave = SassAutocompileOptions.get('compileOnSave');
      this.compileEverySassFiles = SassAutocompileOptions.get('compileFiles') === 'Every SASS file';
      this.compileOnlyFirstLineCommentFiles = SassAutocompileOptions.get('compileFiles') === 'Only with first-line-comment';
      this.compilePartials = SassAutocompileOptions.get('compilePartials');
      this.checkOutputFileAlreadyExists = SassAutocompileOptions.get('checkOutputFileAlreadyExists');
      this.directlyJumpToError = SassAutocompileOptions.get('directlyJumpToError');
      this.showCompileSassItemInTreeViewContextMenu = SassAutocompileOptions.get('showCompileSassItemInTreeViewContextMenu');
      this.compileCompressed = SassAutocompileOptions.get('compileCompressed');
      this.compileCompact = SassAutocompileOptions.get('compileCompact');
      this.compileNested = SassAutocompileOptions.get('compileNested');
      this.compileExpanded = SassAutocompileOptions.get('compileExpanded');
      this.compressedFilenamePattern = SassAutocompileOptions.get('compressedFilenamePattern');
      this.compactFilenamePattern = SassAutocompileOptions.get('compactFilenamePattern');
      this.nestedFilenamePattern = SassAutocompileOptions.get('nestedFilenamePattern');
      this.expandedFilenamePattern = SassAutocompileOptions.get('expandedFilenamePattern');
      this.indentType = SassAutocompileOptions.get('indentType');
      this.indentWidth = SassAutocompileOptions.get('indentWidth');
      this.linefeed = SassAutocompileOptions.get('linefeed');
      this.sourceMap = SassAutocompileOptions.get('sourceMap');
      this.sourceMapEmbed = SassAutocompileOptions.get('sourceMapEmbed');
      this.sourceMapContents = SassAutocompileOptions.get('sourceMapContents');
      this.sourceComments = SassAutocompileOptions.get('sourceComments');
      this.includePath = SassAutocompileOptions.get('includePath');
      this.precision = SassAutocompileOptions.get('precision');
      this.importer = SassAutocompileOptions.get('importer');
      this.functions = SassAutocompileOptions.get('functions');
      this.showInfoNotification = (ref = SassAutocompileOptions.get('notifications')) === 'Notifications' || ref === 'Panel, Notifications';
      this.showSuccessNotification = (ref1 = SassAutocompileOptions.get('notifications')) === 'Notifications' || ref1 === 'Panel, Notifications';
      this.showWarningNotification = (ref2 = SassAutocompileOptions.get('notifications')) === 'Notifications' || ref2 === 'Panel, Notifications';
      this.showErrorNotification = (ref3 = SassAutocompileOptions.get('notifications')) === 'Notifications' || ref3 === 'Panel, Notifications';
      this.autoHideInfoNotification = (ref4 = SassAutocompileOptions.get('autoHideNotifications')) === 'Info, Success' || ref4 === 'Info, Success, Error';
      this.autoHideSuccessNotification = (ref5 = SassAutocompileOptions.get('autoHideNotifications')) === 'Info, Success' || ref5 === 'Info, Success, Error';
      this.autoHideErrorNotification = (ref6 = SassAutocompileOptions.get('autoHideNotifications')) === 'Error' || ref6 === 'Info, Success, Error';
      this.showPanel = (ref7 = SassAutocompileOptions.get('notifications')) === 'Panel' || ref7 === 'Panel, Notifications';
      this.autoHidePanelOnSuccess = (ref8 = SassAutocompileOptions.get('autoHidePanel')) === 'Success' || ref8 === 'Success, Error';
      this.autoHidePanelOnError = (ref9 = SassAutocompileOptions.get('autoHidePanel')) === 'Error' || ref9 === 'Success, Error';
      this.autoHidePanelDelay = SassAutocompileOptions.get('autoHidePanelDelay');
      this.showStartCompilingNotification = SassAutocompileOptions.get('showStartCompilingNotification');
      this.showAdditionalCompilationInfo = SassAutocompileOptions.get('showAdditionalCompilationInfo');
      this.showNodeSassOutput = SassAutocompileOptions.get('showNodeSassOutput');
      this.showOldParametersWarning = SassAutocompileOptions.get('showOldParametersWarning');
      this.nodeSassTimeout = SassAutocompileOptions.get('nodeSassTimeout');
      return this.nodeSassPath = SassAutocompileOptions.get('nodeSassPath');
    };

    return SassAutocompileOptions;

  })();

}).call(this);

//# sourceMappingURL=data:application/json;base64,
