function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _findRepo = require('./find-repo');

var _findRepo2 = _interopRequireDefault(_findRepo);

var _gitWrapper = require('git-wrapper');

var _gitWrapper2 = _interopRequireDefault(_gitWrapper);

"use babel";

var showOpts = {
  s: true,
  format: '%ce%n%cn%n%B'
};

var cache = {};

function getCache(file, hash) {
  return cache[file + '|' + hash] || null;
}

function setCache(file, hash, msg) {
  cache[file + '|' + hash] = msg;
}

function getCommitMessage(file, hash, callback) {
  var repoPath = (0, _findRepo2['default'])(file);

  if (!repoPath) {
    return;
  }

  var git = new _gitWrapper2['default']({ 'git-dir': repoPath });
  git.exec('show', showOpts, [hash], function (error, msg) {
    if (error) {
      return;
    }
    callback(msg);
  });
}

function getCommit(file, hash, callback) {
  var cached = getCache(file, hash);

  if (cached) {
    return callback(cached);
  }

  getCommitMessage(file, hash, function (msg) {

    var lines = msg.split(/\n/g);

    var commit = {
      email: lines.shift(),
      author: lines.shift(),
      subject: lines.shift(),
      message: lines.join('\n').replace(/(^\s+|\s+$)/, '')
    };

    setCache(file, hash, commit);

    callback(commit);
  });
}

module.exports = getCommit;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3RveW9raS8uYXRvbS9wYWNrYWdlcy9ibGFtZS9saWIvdXRpbHMvZ2V0LWNvbW1pdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzt3QkFFcUIsYUFBYTs7OzswQkFDbEIsYUFBYTs7OztBQUg3QixXQUFXLENBQUE7O0FBS1gsSUFBTSxRQUFRLEdBQUc7QUFDZixHQUFDLEVBQUUsSUFBSTtBQUNQLFFBQU0sRUFBRSxjQUFjO0NBQ3ZCLENBQUE7O0FBRUQsSUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFBOztBQUVoQixTQUFTLFFBQVEsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFO0FBQzVCLFNBQU8sS0FBSyxDQUFJLElBQUksU0FBSSxJQUFJLENBQUcsSUFBSSxJQUFJLENBQUE7Q0FDeEM7O0FBRUQsU0FBUyxRQUFRLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUU7QUFDakMsT0FBSyxDQUFJLElBQUksU0FBSSxJQUFJLENBQUcsR0FBRyxHQUFHLENBQUE7Q0FDL0I7O0FBRUQsU0FBUyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRTtBQUM5QyxNQUFNLFFBQVEsR0FBRywyQkFBUyxJQUFJLENBQUMsQ0FBQTs7QUFFL0IsTUFBSSxDQUFDLFFBQVEsRUFBRTtBQUFFLFdBQU87R0FBRTs7QUFFMUIsTUFBTSxHQUFHLEdBQUcsNEJBQVEsRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQTtBQUM1QyxLQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsQ0FBRSxJQUFJLENBQUUsRUFBRSxVQUFDLEtBQUssRUFBRSxHQUFHLEVBQUs7QUFDbkQsUUFBSSxLQUFLLEVBQUU7QUFBRSxhQUFNO0tBQUU7QUFDckIsWUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0dBQ2QsQ0FBQyxDQUFBO0NBQ0g7O0FBRUQsU0FBUyxTQUFTLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUU7QUFDdkMsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQTs7QUFFbkMsTUFBSSxNQUFNLEVBQUU7QUFBRSxXQUFPLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQTtHQUFFOztBQUV2QyxrQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLFVBQUMsR0FBRyxFQUFLOztBQUVwQyxRQUFNLEtBQUssR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFBOztBQUU5QixRQUFNLE1BQU0sR0FBRztBQUNiLFdBQUssRUFBRSxLQUFLLENBQUMsS0FBSyxFQUFFO0FBQ3BCLFlBQU0sRUFBRSxLQUFLLENBQUMsS0FBSyxFQUFFO0FBQ3JCLGFBQU8sRUFBRSxLQUFLLENBQUMsS0FBSyxFQUFFO0FBQ3RCLGFBQU8sRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsRUFBRSxDQUFDO0tBQ3JELENBQUE7O0FBRUQsWUFBUSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUE7O0FBRTVCLFlBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQTtHQUNqQixDQUFDLENBQUE7Q0FDSDs7QUFHRCxNQUFNLENBQUMsT0FBTyxHQUFHLFNBQVMsQ0FBQSIsImZpbGUiOiIvaG9tZS90b3lva2kvLmF0b20vcGFja2FnZXMvYmxhbWUvbGliL3V0aWxzL2dldC1jb21taXQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBiYWJlbFwiXG5cbmltcG9ydCBmaW5kUmVwbyBmcm9tICcuL2ZpbmQtcmVwbydcbmltcG9ydCBHaXQgZnJvbSAnZ2l0LXdyYXBwZXInXG5cbmNvbnN0IHNob3dPcHRzID0ge1xuICBzOiB0cnVlLFxuICBmb3JtYXQ6ICclY2UlbiVjbiVuJUInXG59XG5cbmNvbnN0IGNhY2hlID0ge31cblxuZnVuY3Rpb24gZ2V0Q2FjaGUoZmlsZSwgaGFzaCkge1xuICByZXR1cm4gY2FjaGVbYCR7ZmlsZX18JHtoYXNofWBdIHx8IG51bGxcbn1cblxuZnVuY3Rpb24gc2V0Q2FjaGUoZmlsZSwgaGFzaCwgbXNnKSB7XG4gIGNhY2hlW2Ake2ZpbGV9fCR7aGFzaH1gXSA9IG1zZ1xufVxuXG5mdW5jdGlvbiBnZXRDb21taXRNZXNzYWdlKGZpbGUsIGhhc2gsIGNhbGxiYWNrKSB7XG4gIGNvbnN0IHJlcG9QYXRoID0gZmluZFJlcG8oZmlsZSlcblxuICBpZiAoIXJlcG9QYXRoKSB7IHJldHVybjsgfVxuXG4gIGNvbnN0IGdpdCA9IG5ldyBHaXQoeyAnZ2l0LWRpcic6IHJlcG9QYXRoIH0pXG4gIGdpdC5leGVjKCdzaG93Jywgc2hvd09wdHMsIFsgaGFzaCBdLCAoZXJyb3IsIG1zZykgPT4ge1xuICAgIGlmIChlcnJvcikgeyByZXR1cm4gfVxuICAgIGNhbGxiYWNrKG1zZylcbiAgfSlcbn1cblxuZnVuY3Rpb24gZ2V0Q29tbWl0KGZpbGUsIGhhc2gsIGNhbGxiYWNrKSB7XG4gIGNvbnN0IGNhY2hlZCA9IGdldENhY2hlKGZpbGUsIGhhc2gpXG5cbiAgaWYgKGNhY2hlZCkgeyByZXR1cm4gY2FsbGJhY2soY2FjaGVkKSB9XG5cbiAgZ2V0Q29tbWl0TWVzc2FnZShmaWxlLCBoYXNoLCAobXNnKSA9PiB7XG5cbiAgICBjb25zdCBsaW5lcyA9IG1zZy5zcGxpdCgvXFxuL2cpXG5cbiAgICBjb25zdCBjb21taXQgPSB7XG4gICAgICBlbWFpbDogbGluZXMuc2hpZnQoKSxcbiAgICAgIGF1dGhvcjogbGluZXMuc2hpZnQoKSxcbiAgICAgIHN1YmplY3Q6IGxpbmVzLnNoaWZ0KCksXG4gICAgICBtZXNzYWdlOiBsaW5lcy5qb2luKCdcXG4nKS5yZXBsYWNlKC8oXlxccyt8XFxzKyQpLywgJycpXG4gICAgfVxuXG4gICAgc2V0Q2FjaGUoZmlsZSwgaGFzaCwgY29tbWl0KVxuXG4gICAgY2FsbGJhY2soY29tbWl0KVxuICB9KVxufVxuXG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0Q29tbWl0XG4iXX0=