Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.activate = activate;
exports.deactivate = deactivate;
/** @babel */

var commands = null;
var editorObserver = null;
var tabsToSpaces = null;

function activate() {
  commands = atom.commands.add('atom-workspace', {
    'tabs-to-spaces:tabify': function tabsToSpacesTabify() {
      loadModule();
      tabsToSpaces.tabify();
    },
    'tabs-to-spaces:untabify': function tabsToSpacesUntabify() {
      loadModule();
      tabsToSpaces.untabify();
    },
    'tabs-to-spaces:untabify-all': function tabsToSpacesUntabifyAll() {
      loadModule();
      tabsToSpaces.untabifyAll();
    }
  });

  editorObserver = atom.workspace.observeTextEditors(function (editor) {
    handleEvents(editor);
  });
}

function deactivate() {
  if (editorObserver) {
    editorObserver.dispose();
  }

  if (commands) {
    commands.dispose();
  }
}

function handleEvents(editor) {
  editor.getBuffer().onWillSave(function () {
    if (editor.getPath() === atom.config.getUserConfigPath()) {
      return;
    }

    var onSave = atom.config.get('tabs-to-spaces.onSave', { scope: editor.getRootScopeDescriptor() });
    if (onSave === 'tabify') {
      loadModule();
      tabsToSpaces.tabify();
    } else if (onSave === 'untabify') {
      loadModule();
      tabsToSpaces.untabify();
    }
  });
}

function loadModule() {
  if (!tabsToSpaces) {
    tabsToSpaces = require('./tabs-to-spaces');
  }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3RveW9raS8uYXRvbS9wYWNrYWdlcy90YWJzLXRvLXNwYWNlcy9saWIvaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUVBLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQTtBQUNuQixJQUFJLGNBQWMsR0FBRyxJQUFJLENBQUE7QUFDekIsSUFBSSxZQUFZLEdBQUcsSUFBSSxDQUFBOztBQUVoQixTQUFTLFFBQVEsR0FBSTtBQUMxQixVQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUU7QUFDN0MsMkJBQXVCLEVBQUUsOEJBQU07QUFDN0IsZ0JBQVUsRUFBRSxDQUFBO0FBQ1osa0JBQVksQ0FBQyxNQUFNLEVBQUUsQ0FBQTtLQUN0QjtBQUNELDZCQUF5QixFQUFFLGdDQUFNO0FBQy9CLGdCQUFVLEVBQUUsQ0FBQTtBQUNaLGtCQUFZLENBQUMsUUFBUSxFQUFFLENBQUE7S0FDeEI7QUFDRCxpQ0FBNkIsRUFBRSxtQ0FBTTtBQUNuQyxnQkFBVSxFQUFFLENBQUE7QUFDWixrQkFBWSxDQUFDLFdBQVcsRUFBRSxDQUFBO0tBQzNCO0dBQ0YsQ0FBQyxDQUFBOztBQUVGLGdCQUFjLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxrQkFBa0IsQ0FBQyxVQUFDLE1BQU0sRUFBSztBQUM3RCxnQkFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0dBQ3JCLENBQUMsQ0FBQTtDQUNIOztBQUVNLFNBQVMsVUFBVSxHQUFJO0FBQzVCLE1BQUksY0FBYyxFQUFFO0FBQ2xCLGtCQUFjLENBQUMsT0FBTyxFQUFFLENBQUE7R0FDekI7O0FBRUQsTUFBSSxRQUFRLEVBQUU7QUFDWixZQUFRLENBQUMsT0FBTyxFQUFFLENBQUE7R0FDbkI7Q0FDRjs7QUFFRCxTQUFTLFlBQVksQ0FBRSxNQUFNLEVBQUU7QUFDN0IsUUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxZQUFNO0FBQ2xDLFFBQUksTUFBTSxDQUFDLE9BQU8sRUFBRSxLQUFLLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLEVBQUUsRUFBRTtBQUN4RCxhQUFNO0tBQ1A7O0FBRUQsUUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsdUJBQXVCLEVBQUUsRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLHNCQUFzQixFQUFFLEVBQUUsQ0FBQyxDQUFBO0FBQ2pHLFFBQUksTUFBTSxLQUFLLFFBQVEsRUFBRTtBQUN2QixnQkFBVSxFQUFFLENBQUE7QUFDWixrQkFBWSxDQUFDLE1BQU0sRUFBRSxDQUFBO0tBQ3RCLE1BQU0sSUFBSSxNQUFNLEtBQUssVUFBVSxFQUFFO0FBQ2hDLGdCQUFVLEVBQUUsQ0FBQTtBQUNaLGtCQUFZLENBQUMsUUFBUSxFQUFFLENBQUE7S0FDeEI7R0FDRixDQUFDLENBQUE7Q0FDSDs7QUFFRCxTQUFTLFVBQVUsR0FBSTtBQUNyQixNQUFJLENBQUMsWUFBWSxFQUFFO0FBQ2pCLGdCQUFZLEdBQUcsT0FBTyxDQUFDLGtCQUFrQixDQUFDLENBQUE7R0FDM0M7Q0FDRiIsImZpbGUiOiIvaG9tZS90b3lva2kvLmF0b20vcGFja2FnZXMvdGFicy10by1zcGFjZXMvbGliL2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIEBiYWJlbCAqL1xuXG5sZXQgY29tbWFuZHMgPSBudWxsXG5sZXQgZWRpdG9yT2JzZXJ2ZXIgPSBudWxsXG5sZXQgdGFic1RvU3BhY2VzID0gbnVsbFxuXG5leHBvcnQgZnVuY3Rpb24gYWN0aXZhdGUgKCkge1xuICBjb21tYW5kcyA9IGF0b20uY29tbWFuZHMuYWRkKCdhdG9tLXdvcmtzcGFjZScsIHtcbiAgICAndGFicy10by1zcGFjZXM6dGFiaWZ5JzogKCkgPT4ge1xuICAgICAgbG9hZE1vZHVsZSgpXG4gICAgICB0YWJzVG9TcGFjZXMudGFiaWZ5KClcbiAgICB9LFxuICAgICd0YWJzLXRvLXNwYWNlczp1bnRhYmlmeSc6ICgpID0+IHtcbiAgICAgIGxvYWRNb2R1bGUoKVxuICAgICAgdGFic1RvU3BhY2VzLnVudGFiaWZ5KClcbiAgICB9LFxuICAgICd0YWJzLXRvLXNwYWNlczp1bnRhYmlmeS1hbGwnOiAoKSA9PiB7XG4gICAgICBsb2FkTW9kdWxlKClcbiAgICAgIHRhYnNUb1NwYWNlcy51bnRhYmlmeUFsbCgpXG4gICAgfVxuICB9KVxuXG4gIGVkaXRvck9ic2VydmVyID0gYXRvbS53b3Jrc3BhY2Uub2JzZXJ2ZVRleHRFZGl0b3JzKChlZGl0b3IpID0+IHtcbiAgICBoYW5kbGVFdmVudHMoZWRpdG9yKVxuICB9KVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVhY3RpdmF0ZSAoKSB7XG4gIGlmIChlZGl0b3JPYnNlcnZlcikge1xuICAgIGVkaXRvck9ic2VydmVyLmRpc3Bvc2UoKVxuICB9XG5cbiAgaWYgKGNvbW1hbmRzKSB7XG4gICAgY29tbWFuZHMuZGlzcG9zZSgpXG4gIH1cbn1cblxuZnVuY3Rpb24gaGFuZGxlRXZlbnRzIChlZGl0b3IpIHtcbiAgZWRpdG9yLmdldEJ1ZmZlcigpLm9uV2lsbFNhdmUoKCkgPT4ge1xuICAgIGlmIChlZGl0b3IuZ2V0UGF0aCgpID09PSBhdG9tLmNvbmZpZy5nZXRVc2VyQ29uZmlnUGF0aCgpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBsZXQgb25TYXZlID0gYXRvbS5jb25maWcuZ2V0KCd0YWJzLXRvLXNwYWNlcy5vblNhdmUnLCB7IHNjb3BlOiBlZGl0b3IuZ2V0Um9vdFNjb3BlRGVzY3JpcHRvcigpIH0pXG4gICAgaWYgKG9uU2F2ZSA9PT0gJ3RhYmlmeScpIHtcbiAgICAgIGxvYWRNb2R1bGUoKVxuICAgICAgdGFic1RvU3BhY2VzLnRhYmlmeSgpXG4gICAgfSBlbHNlIGlmIChvblNhdmUgPT09ICd1bnRhYmlmeScpIHtcbiAgICAgIGxvYWRNb2R1bGUoKVxuICAgICAgdGFic1RvU3BhY2VzLnVudGFiaWZ5KClcbiAgICB9XG4gIH0pXG59XG5cbmZ1bmN0aW9uIGxvYWRNb2R1bGUgKCkge1xuICBpZiAoIXRhYnNUb1NwYWNlcykge1xuICAgIHRhYnNUb1NwYWNlcyA9IHJlcXVpcmUoJy4vdGFicy10by1zcGFjZXMnKVxuICB9XG59XG4iXX0=